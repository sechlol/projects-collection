#include <sstream>
#include "Ex1Dna.h"

std::string Ex1Dna::GetInput() const {
    return "TGCTTAGAACGCCGATTCACTCAGACATTGTCTGATCACAAATCTAATTGACTGCGAAGGGCCGTCCGTTTACTAAGCTGAATGGACCTGAGCCGCACGATCCGGAATGGGGCGCGAAGCACGTGTCTACGCCTGTTGAATCTCTGCCATTTGCAAATGGCAAGTACTAACGGCCCGCTCTCGGGGGATTAACACCACCAGCAAGTTTCAACAGTCCTCACATTTCTTATCATTACCGCTCACGCGGGCAAATTCAATCCGACTAGCGTGTTGTACACGCCTGCAGGAATTGCATTGCTATTTCCAAGTCCTCCGGTTGTAAATTACGTCTTCATGAGCCTTGACACCCCTAGGCATTAAAATTTGGCGTCATCCGGTCGCCTCACGTACGTACAATACTGAATAGCCCTATCATGATCGCCAGCTCGCTGAGAACAAAGCTATCCGCATCCACTAGGATAGCAAAGCAGATCACGCCAGTTGCCGTGTAGTGTGACCGAATCGACTTTTGATTGGCCTCAAGAGGAGTCTATCAGATTTTCGGGGCTTTTCAGAATGGAAAGAGGACTTGGGCGGGGGACTTAACCGTCTGATCAAAAGTGACTCCAATACTGCGCGATACGGAGCCTCTACACCAGGGCCCTTAAGACACCGGCAATTATACATGGCACACGTCTGCCCAAGCGCCATGCGGTCTGGCATATAAGTTTCTTTGGGCGTGTGTACTAGCCTGAGCCCACCTAGCCTCTAGCGGTTCAAATACCGATTAGGCCCACTTTCGGTTTGCCGGTGTCTCGCATAATCGGTGAAATATACAGTGGTCCG";
}

SymbolsCount Ex1Dna::Execute(const std::string &input) const {
    SymbolsCount count{};
    for(auto& symbol : input){
        if (symbol == 'A')
            count.ACount++;
        else if (symbol == 'C')
            count.CCount++;
        else if (symbol == 'T')
            count.TCount++;
        else if (symbol == 'G')
            count.GCount++;
    }
    return count;
}

std::string Ex1Dna::ToString(const SymbolsCount &result) const {
    std::stringstream out;
    out << result.ACount << " " << result.CCount << " " << result.GCount << " " << result.TCount;
    return out.str();
}

bool Ex1Dna::Test() const {
    return Run().Outcome == "203 222 196 204";
}

